<htmlPage title="The plan">
<h3>Architecture</h3>
<p>
	The part visible to the client will be written in XHTML, CSS and Javascript. 
</p>
<p>
	The server end will be written in python, and will use the Python Imaging Library to 
	access the scanner and convert the images. The server will run as an independent web 
	server on a user configurable port.
</p>
<p>
	While the CSS and Javascript will remain static, the DOM of the XHTML will be modified
	before the page is sent to the user. This modification will mainly mean changing
	the form values to match the ones the user specified. The dom manipulation will
	be very non-intrusive. The only changes will be made in to those elements with certain
	id attributes. In practical terms, this means that the entire XHTML part can be 
	completely redesigned or rewritten, and will still work with the server part as long 
	as the tags are on the right form elements. This also means that any user configuration
	of the web interface should be done by the user modifying the xhtml, css or javascript.
</p>

<h3>Requirements</h3>
<ul>
	<li>Python and the Python Imaging Library (PIL) with SANE support.</li>
	<li>An installed version of SANE</li>
</ul>

<h3>Roadmap</h3>
<p>
	Small fixes and some features might get implemented in advance as 
	&quot;patch&quot; releases (increments of the third number), and when all 
	features listed here are implemented the minor number will be bumped. Only architectural
	or large functional changes will cause a bump in the major number.
</p>
<p>
	This is only a rough draft, and it is quite likely that the list will change as development proceeds.
</p>
<h4>Version 0.1.0 - Proof of concept</h4>
<ul>
	<li>A python webserver will run independently.</li>
	<li>Darkening of the image will be done using an overlay on the client side</li>
	<li>User may select the format for the file</li>
	<li>Will work on recent Gecko based browsers</li>
</ul>
<h4>Version 1.0.0</h4>
<ul>
	<li>Selection, brightness and contrast using mouse will work in browsers based on Gecko, IE6 and KHTML</li>
	<li>Images will be saved on the server, a link will be provided to the user, and the link will be valid for 30minutes before the image is removed</li>
	<li>Landscape-mode scanning</li>
	<li>Configuration files</li>
	<li>HTML manipulation on server before sending, html will reflect user's settings</li>
	<li>Brightness/contrast settings available only if supported by scanner</li>
</ul>	

<h4>Version 1.1.0</h4>
<ul>
	<li>Thought will be given to security</li>
	<li>Using up/down keys in form will affect selection and sliders in all supported browsers</li>
	<li>Opera support</li>
	<li>Client-side zooming of the preview image to simplify exact selection</li>
</ul>

<h4>Version 1.2.0</h4>
<ul>
	<li>Darkening on the server side will be investigated, and implemented if seen beneficial (speed?)</li>
	<li>Debugging options for server</li>
	<li>Online help system</li>
	<li>More thinking about security</li>
</ul>

<h4>Version 1.3.0</h4>
<ul>
	<li>Advanced file handling</li>
	<li>Preview using something similar to the <a href="http://persistent.info/files/20040508.magnifier/">magnifier</a></li>
	<li>Expose more capabilities of the Python Imaging Library</li>
	<li>Brightness and contrast is done by uploading a custom gamma table for scanners that don't support brightness and contrast in hw (requires improvements to the Python Imaging Module)</li> 

</ul>

<h3>Open questions</h3>
<ul>
	<li>
		How should saving, viewing of a saved image and deleting of a saved image work?
		<ul>
			<li>
			I like the idea of putting everything in steps. First the person previews, 
			sets the levels and selection and choses if the scanned image should be reviewed 
			before save. Then if the user selected to review before save, she would get 
			something similar to <a href="http://persistent.info/files/20040508.magnifier/">the magnifier</a>
			and if she accepts, she would be given a Save As dialog (this is done by serving
			the image as type octet-stream). 
			</li>
			<li>
			Images should be stored for soemthing like 30mins and the url given to the user should
			be ungessable and unique (=basedir/timestamp+randomnumbers/imagename.png).
			</li>
		</ul>
	</li>
</ul>


</htmlPage>
